import{LimitOrderDecoder,ZX,LimitOrderPredicateDecoder,Web3ProviderConnector,LimitOrderProtocolFacade}from"@1inch/limit-order-protocol-utils";import Web3 from"web3";import{get}from"lodash";import{AuctionSalt,AuctionSuffix}from"@1inch/fusion-sdk";import"./main.css";export const ethereumMainContracts={limitOrder:"0x1111111254eeb25477b68fb85ed929f73a960582",loSeriesNonceManager:"0x303389f541ff2d620e42832f180a08e767b28e1"};export const binanceMainContracts={limitOrder:"0x1111111254eeb25477b68fb85ed929f73a960582",loSeriesNonceManager:"0x58ce0e6ef670c9a05622f4188faa03a9e12ee2e4"};const addressMap=new Map([[1,ethereumMainContracts],[56,binanceMainContracts]]);let web3,facade;async function connectWeb3(){if(void 0!==window.ethereum){web3=new Web3(window.ethereum);try{await window.ethereum.enable()}catch(e){console.error("User denied account access",e)}}else console.error("Please install MetaMask")}async function parseOrder(){await connectWeb3();const e=await web3.eth.net.getId(),t=document.querySelector("#order"),r=JSON.parse(t.value);if(r.interaction!==ZX){const t=LimitOrderDecoder.unpackInteractions(r.offsets,r.interactions);for(const e of Object.keys(t)){const r=document.querySelector(`#${e}`);r&&(r.value=t[e])}const n=new LimitOrderPredicateDecoder(e);if(t.predicate&&t.predicate!==ZX){const o=addressMap.get(e).limitOrder;facade=getLimitOrderProtocolFacade(e,o);const c=await simulateResult(o,t.predicate);"boolean"==typeof c&&(document.querySelector("#simulate-result").value=c);const i=await checkPredicate(r);document.querySelector("#check-predicate").value=i;const a=n.decode(t.predicate),{nonce:s,timestamp:d,series:u}=getExpiration(n,a),m=document.querySelector("#timestamp");m&&d&&(m.value=new Date(1e3*d));const l=document.querySelector("#nonce");l&&!isNaN(s)&&(l.value=s);const f=document.querySelector("#series");f&&!isNaN(u)&&(f.value=u)}}else alert("Interaction is empty!")}async function checkPredicate(e){return facade.checkPredicate(e)}async function simulateResult(e,t){try{const{success:r}=await facade.simulate(e,t);return r}catch(e){return!1}}function getLimitOrderProtocolFacade(e,t){const r=getProvideConnector();return new LimitOrderProtocolFacade(t,e,r)}function getProvideConnector(){return new Web3ProviderConnector(web3)}export function getExpiration(e,t){const r=e.findFirstDFS(t,(e=>!("function"!==e.type||!("name"in e)||!["timestampBelow","timestampBelowAndNonceEquals"].includes(e.name))));if(!r)throw new Error("No nonce predicate found in order.");return{timestamp:+get(r,"args.timestamp.bytes"),nonce:+get(r,"args.nonce.bytes"),series:+get(r,"args.series.bytes")}}async function parseFusionOrder(){const e=document.querySelector("#fuison-order"),t=JSON.parse(e.value),r=AuctionSalt.decode(t.salt);document.getElementById("fusionSalt").innerHTML=JSON.stringify(r);const n=AuctionSuffix.decode(t.interactions);document.getElementById("fusionInteractions").innerHTML=JSON.stringify(n)}document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#parseOrderBtn").addEventListener("click",parseOrder)})),document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#parseFusionOrderBtn").addEventListener("click",parseFusionOrder)}));